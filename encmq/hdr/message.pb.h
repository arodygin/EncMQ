// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class request;
class reply;
class rsa_hello;
class rsa_key;

// ===================================================================

class request : public ::google::protobuf::Message {
 public:
  request();
  virtual ~request();
  
  request(const request& from);
  
  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const request& default_instance();
  
  void Swap(request* other);
  
  // implements Message ----------------------------------------------
  
  request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 key_size = 1;
  inline bool has_key_size() const;
  inline void clear_key_size();
  static const int kKeySizeFieldNumber = 1;
  inline ::google::protobuf::uint32 key_size() const;
  inline void set_key_size(::google::protobuf::uint32 value);
  
  // optional bytes key_data = 2;
  inline bool has_key_data() const;
  inline void clear_key_data();
  static const int kKeyDataFieldNumber = 2;
  inline const ::std::string& key_data() const;
  inline void set_key_data(const ::std::string& value);
  inline void set_key_data(const char* value);
  inline void set_key_data(const void* value, size_t size);
  inline ::std::string* mutable_key_data();
  inline ::std::string* release_key_data();
  
  // required uint32 mac_size = 3;
  inline bool has_mac_size() const;
  inline void clear_mac_size();
  static const int kMacSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 mac_size() const;
  inline void set_mac_size(::google::protobuf::uint32 value);
  
  // optional bytes mac_data = 4;
  inline bool has_mac_data() const;
  inline void clear_mac_data();
  static const int kMacDataFieldNumber = 4;
  inline const ::std::string& mac_data() const;
  inline void set_mac_data(const ::std::string& value);
  inline void set_mac_data(const char* value);
  inline void set_mac_data(const void* value, size_t size);
  inline ::std::string* mutable_mac_data();
  inline ::std::string* release_mac_data();
  
  // required string msg_type = 5;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 5;
  inline const ::std::string& msg_type() const;
  inline void set_msg_type(const ::std::string& value);
  inline void set_msg_type(const char* value);
  inline void set_msg_type(const char* value, size_t size);
  inline ::std::string* mutable_msg_type();
  inline ::std::string* release_msg_type();
  
  // required uint32 msg_size = 6;
  inline bool has_msg_size() const;
  inline void clear_msg_size();
  static const int kMsgSizeFieldNumber = 6;
  inline ::google::protobuf::uint32 msg_size() const;
  inline void set_msg_size(::google::protobuf::uint32 value);
  
  // optional bytes msg_data = 7;
  inline bool has_msg_data() const;
  inline void clear_msg_data();
  static const int kMsgDataFieldNumber = 7;
  inline const ::std::string& msg_data() const;
  inline void set_msg_data(const ::std::string& value);
  inline void set_msg_data(const char* value);
  inline void set_msg_data(const void* value, size_t size);
  inline ::std::string* mutable_msg_data();
  inline ::std::string* release_msg_data();
  
  // @@protoc_insertion_point(class_scope:message.request)
 private:
  inline void set_has_key_size();
  inline void clear_has_key_size();
  inline void set_has_key_data();
  inline void clear_has_key_data();
  inline void set_has_mac_size();
  inline void clear_has_mac_size();
  inline void set_has_mac_data();
  inline void clear_has_mac_data();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_size();
  inline void clear_has_msg_size();
  inline void set_has_msg_data();
  inline void clear_has_msg_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_data_;
  ::google::protobuf::uint32 key_size_;
  ::google::protobuf::uint32 mac_size_;
  ::std::string* mac_data_;
  ::std::string* msg_type_;
  ::std::string* msg_data_;
  ::google::protobuf::uint32 msg_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static request* default_instance_;
};
// -------------------------------------------------------------------

class reply : public ::google::protobuf::Message {
 public:
  reply();
  virtual ~reply();
  
  reply(const reply& from);
  
  inline reply& operator=(const reply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const reply& default_instance();
  
  void Swap(reply* other);
  
  // implements Message ----------------------------------------------
  
  reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reply& from);
  void MergeFrom(const reply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mac_size = 1;
  inline bool has_mac_size() const;
  inline void clear_mac_size();
  static const int kMacSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 mac_size() const;
  inline void set_mac_size(::google::protobuf::uint32 value);
  
  // optional bytes mac_data = 2;
  inline bool has_mac_data() const;
  inline void clear_mac_data();
  static const int kMacDataFieldNumber = 2;
  inline const ::std::string& mac_data() const;
  inline void set_mac_data(const ::std::string& value);
  inline void set_mac_data(const char* value);
  inline void set_mac_data(const void* value, size_t size);
  inline ::std::string* mutable_mac_data();
  inline ::std::string* release_mac_data();
  
  // required string msg_type = 3;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 3;
  inline const ::std::string& msg_type() const;
  inline void set_msg_type(const ::std::string& value);
  inline void set_msg_type(const char* value);
  inline void set_msg_type(const char* value, size_t size);
  inline ::std::string* mutable_msg_type();
  inline ::std::string* release_msg_type();
  
  // required uint32 msg_size = 4;
  inline bool has_msg_size() const;
  inline void clear_msg_size();
  static const int kMsgSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 msg_size() const;
  inline void set_msg_size(::google::protobuf::uint32 value);
  
  // optional bytes msg_data = 5;
  inline bool has_msg_data() const;
  inline void clear_msg_data();
  static const int kMsgDataFieldNumber = 5;
  inline const ::std::string& msg_data() const;
  inline void set_msg_data(const ::std::string& value);
  inline void set_msg_data(const char* value);
  inline void set_msg_data(const void* value, size_t size);
  inline ::std::string* mutable_msg_data();
  inline ::std::string* release_msg_data();
  
  // @@protoc_insertion_point(class_scope:message.reply)
 private:
  inline void set_has_mac_size();
  inline void clear_has_mac_size();
  inline void set_has_mac_data();
  inline void clear_has_mac_data();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_size();
  inline void clear_has_msg_size();
  inline void set_has_msg_data();
  inline void clear_has_msg_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* mac_data_;
  ::google::protobuf::uint32 mac_size_;
  ::google::protobuf::uint32 msg_size_;
  ::std::string* msg_type_;
  ::std::string* msg_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static reply* default_instance_;
};
// -------------------------------------------------------------------

class rsa_hello : public ::google::protobuf::Message {
 public:
  rsa_hello();
  virtual ~rsa_hello();
  
  rsa_hello(const rsa_hello& from);
  
  inline rsa_hello& operator=(const rsa_hello& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsa_hello& default_instance();
  
  void Swap(rsa_hello* other);
  
  // implements Message ----------------------------------------------
  
  rsa_hello* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rsa_hello& from);
  void MergeFrom(const rsa_hello& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:message.rsa_hello)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static rsa_hello* default_instance_;
};
// -------------------------------------------------------------------

class rsa_key : public ::google::protobuf::Message {
 public:
  rsa_key();
  virtual ~rsa_key();
  
  rsa_key(const rsa_key& from);
  
  inline rsa_key& operator=(const rsa_key& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const rsa_key& default_instance();
  
  void Swap(rsa_key* other);
  
  // implements Message ----------------------------------------------
  
  rsa_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rsa_key& from);
  void MergeFrom(const rsa_key& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 key_size = 1;
  inline bool has_key_size() const;
  inline void clear_key_size();
  static const int kKeySizeFieldNumber = 1;
  inline ::google::protobuf::uint32 key_size() const;
  inline void set_key_size(::google::protobuf::uint32 value);
  
  // optional bytes key_data = 2;
  inline bool has_key_data() const;
  inline void clear_key_data();
  static const int kKeyDataFieldNumber = 2;
  inline const ::std::string& key_data() const;
  inline void set_key_data(const ::std::string& value);
  inline void set_key_data(const char* value);
  inline void set_key_data(const void* value, size_t size);
  inline ::std::string* mutable_key_data();
  inline ::std::string* release_key_data();
  
  // @@protoc_insertion_point(class_scope:message.rsa_key)
 private:
  inline void set_has_key_size();
  inline void clear_has_key_size();
  inline void set_has_key_data();
  inline void clear_has_key_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_data_;
  ::google::protobuf::uint32 key_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static rsa_key* default_instance_;
};
// ===================================================================


// ===================================================================

// request

// required uint32 key_size = 1;
inline bool request::has_key_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request::set_has_key_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request::clear_has_key_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void request::clear_key_size() {
  key_size_ = 0u;
  clear_has_key_size();
}
inline ::google::protobuf::uint32 request::key_size() const {
  return key_size_;
}
inline void request::set_key_size(::google::protobuf::uint32 value) {
  set_has_key_size();
  key_size_ = value;
}

// optional bytes key_data = 2;
inline bool request::has_key_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void request::set_has_key_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void request::clear_has_key_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void request::clear_key_data() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    key_data_->clear();
  }
  clear_has_key_data();
}
inline const ::std::string& request::key_data() const {
  return *key_data_;
}
inline void request::set_key_data(const ::std::string& value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void request::set_key_data(const char* value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void request::set_key_data(const void* value, size_t size) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request::mutable_key_data() {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  return key_data_;
}
inline ::std::string* request::release_key_data() {
  clear_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_data_;
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 mac_size = 3;
inline bool request::has_mac_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void request::set_has_mac_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void request::clear_has_mac_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void request::clear_mac_size() {
  mac_size_ = 0u;
  clear_has_mac_size();
}
inline ::google::protobuf::uint32 request::mac_size() const {
  return mac_size_;
}
inline void request::set_mac_size(::google::protobuf::uint32 value) {
  set_has_mac_size();
  mac_size_ = value;
}

// optional bytes mac_data = 4;
inline bool request::has_mac_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void request::set_has_mac_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void request::clear_has_mac_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void request::clear_mac_data() {
  if (mac_data_ != &::google::protobuf::internal::kEmptyString) {
    mac_data_->clear();
  }
  clear_has_mac_data();
}
inline const ::std::string& request::mac_data() const {
  return *mac_data_;
}
inline void request::set_mac_data(const ::std::string& value) {
  set_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    mac_data_ = new ::std::string;
  }
  mac_data_->assign(value);
}
inline void request::set_mac_data(const char* value) {
  set_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    mac_data_ = new ::std::string;
  }
  mac_data_->assign(value);
}
inline void request::set_mac_data(const void* value, size_t size) {
  set_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    mac_data_ = new ::std::string;
  }
  mac_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request::mutable_mac_data() {
  set_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    mac_data_ = new ::std::string;
  }
  return mac_data_;
}
inline ::std::string* request::release_mac_data() {
  clear_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_data_;
    mac_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string msg_type = 5;
inline bool request::has_msg_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void request::set_has_msg_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void request::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void request::clear_msg_type() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    msg_type_->clear();
  }
  clear_has_msg_type();
}
inline const ::std::string& request::msg_type() const {
  return *msg_type_;
}
inline void request::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void request::set_msg_type(const char* value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void request::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request::mutable_msg_type() {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  return msg_type_;
}
inline ::std::string* request::release_msg_type() {
  clear_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_type_;
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 msg_size = 6;
inline bool request::has_msg_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void request::set_has_msg_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void request::clear_has_msg_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void request::clear_msg_size() {
  msg_size_ = 0u;
  clear_has_msg_size();
}
inline ::google::protobuf::uint32 request::msg_size() const {
  return msg_size_;
}
inline void request::set_msg_size(::google::protobuf::uint32 value) {
  set_has_msg_size();
  msg_size_ = value;
}

// optional bytes msg_data = 7;
inline bool request::has_msg_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void request::set_has_msg_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void request::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void request::clear_msg_data() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    msg_data_->clear();
  }
  clear_has_msg_data();
}
inline const ::std::string& request::msg_data() const {
  return *msg_data_;
}
inline void request::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void request::set_msg_data(const char* value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void request::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request::mutable_msg_data() {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  return msg_data_;
}
inline ::std::string* request::release_msg_data() {
  clear_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_data_;
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// reply

// required uint32 mac_size = 1;
inline bool reply::has_mac_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reply::set_has_mac_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reply::clear_has_mac_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reply::clear_mac_size() {
  mac_size_ = 0u;
  clear_has_mac_size();
}
inline ::google::protobuf::uint32 reply::mac_size() const {
  return mac_size_;
}
inline void reply::set_mac_size(::google::protobuf::uint32 value) {
  set_has_mac_size();
  mac_size_ = value;
}

// optional bytes mac_data = 2;
inline bool reply::has_mac_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reply::set_has_mac_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reply::clear_has_mac_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reply::clear_mac_data() {
  if (mac_data_ != &::google::protobuf::internal::kEmptyString) {
    mac_data_->clear();
  }
  clear_has_mac_data();
}
inline const ::std::string& reply::mac_data() const {
  return *mac_data_;
}
inline void reply::set_mac_data(const ::std::string& value) {
  set_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    mac_data_ = new ::std::string;
  }
  mac_data_->assign(value);
}
inline void reply::set_mac_data(const char* value) {
  set_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    mac_data_ = new ::std::string;
  }
  mac_data_->assign(value);
}
inline void reply::set_mac_data(const void* value, size_t size) {
  set_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    mac_data_ = new ::std::string;
  }
  mac_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* reply::mutable_mac_data() {
  set_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    mac_data_ = new ::std::string;
  }
  return mac_data_;
}
inline ::std::string* reply::release_mac_data() {
  clear_has_mac_data();
  if (mac_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_data_;
    mac_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string msg_type = 3;
inline bool reply::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reply::set_has_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reply::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reply::clear_msg_type() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    msg_type_->clear();
  }
  clear_has_msg_type();
}
inline const ::std::string& reply::msg_type() const {
  return *msg_type_;
}
inline void reply::set_msg_type(const ::std::string& value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void reply::set_msg_type(const char* value) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(value);
}
inline void reply::set_msg_type(const char* value, size_t size) {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  msg_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* reply::mutable_msg_type() {
  set_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    msg_type_ = new ::std::string;
  }
  return msg_type_;
}
inline ::std::string* reply::release_msg_type() {
  clear_has_msg_type();
  if (msg_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_type_;
    msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 msg_size = 4;
inline bool reply::has_msg_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reply::set_has_msg_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reply::clear_has_msg_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reply::clear_msg_size() {
  msg_size_ = 0u;
  clear_has_msg_size();
}
inline ::google::protobuf::uint32 reply::msg_size() const {
  return msg_size_;
}
inline void reply::set_msg_size(::google::protobuf::uint32 value) {
  set_has_msg_size();
  msg_size_ = value;
}

// optional bytes msg_data = 5;
inline bool reply::has_msg_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void reply::set_has_msg_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void reply::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void reply::clear_msg_data() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    msg_data_->clear();
  }
  clear_has_msg_data();
}
inline const ::std::string& reply::msg_data() const {
  return *msg_data_;
}
inline void reply::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void reply::set_msg_data(const char* value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void reply::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* reply::mutable_msg_data() {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  return msg_data_;
}
inline ::std::string* reply::release_msg_data() {
  clear_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_data_;
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// rsa_hello

// -------------------------------------------------------------------

// rsa_key

// required uint32 key_size = 1;
inline bool rsa_key::has_key_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rsa_key::set_has_key_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rsa_key::clear_has_key_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rsa_key::clear_key_size() {
  key_size_ = 0u;
  clear_has_key_size();
}
inline ::google::protobuf::uint32 rsa_key::key_size() const {
  return key_size_;
}
inline void rsa_key::set_key_size(::google::protobuf::uint32 value) {
  set_has_key_size();
  key_size_ = value;
}

// optional bytes key_data = 2;
inline bool rsa_key::has_key_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rsa_key::set_has_key_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rsa_key::clear_has_key_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rsa_key::clear_key_data() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    key_data_->clear();
  }
  clear_has_key_data();
}
inline const ::std::string& rsa_key::key_data() const {
  return *key_data_;
}
inline void rsa_key::set_key_data(const ::std::string& value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void rsa_key::set_key_data(const char* value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void rsa_key::set_key_data(const void* value, size_t size) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rsa_key::mutable_key_data() {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  return key_data_;
}
inline ::std::string* rsa_key::release_key_data() {
  clear_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_data_;
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
