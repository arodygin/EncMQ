// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  envelope_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  envelope_descriptor_ = file->message_type(0);
  static const int envelope_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(envelope, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(envelope, msg_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(envelope, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(envelope, mac_),
  };
  envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      envelope_descriptor_,
      envelope::default_instance_,
      envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(envelope, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(envelope, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(envelope));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    envelope_descriptor_, &envelope::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete envelope::default_instance_;
  delete envelope_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\007message\"W\n\010envelope\022\020\n\010"
    "msg_type\030\001 \002(\t\022\020\n\010msg_size\030\002 \002(\r\022\020\n\010msg_"
    "data\030\003 \001(\014\022\013\n\003mac\030\004 \001(\014*\010\010d\020\200\200\200\200\002:\036\n\003key"
    "\022\021.message.envelope\030d \001(\014", 145);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  envelope::default_instance_ = new envelope();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::message::envelope::default_instance(),
    100, 12, false, false);
  envelope::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int envelope::kMsgTypeFieldNumber;
const int envelope::kMsgSizeFieldNumber;
const int envelope::kMsgDataFieldNumber;
const int envelope::kMacFieldNumber;
#endif  // !_MSC_VER

envelope::envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void envelope::InitAsDefaultInstance() {
}

envelope::envelope(const envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void envelope::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_size_ = 0u;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

envelope::~envelope() {
  SharedDtor();
}

void envelope::SharedDtor() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return envelope_descriptor_;
}

const envelope& envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

envelope* envelope::default_instance_ = NULL;

envelope* envelope::New() const {
  return new envelope;
}

void envelope::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_type()) {
      if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_->clear();
      }
    }
    msg_size_ = 0u;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_size;
        break;
      }
      
      // required uint32 msg_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_size_)));
          set_has_msg_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_data;
        break;
      }
      
      // optional bytes msg_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mac;
        break;
      }
      
      // optional bytes mac = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_type(), output);
  }
  
  // required uint32 msg_size = 2;
  if (has_msg_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_size(), output);
  }
  
  // optional bytes msg_data = 3;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg_data(), output);
  }
  
  // optional bytes mac = 4;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->mac(), output);
  }
  
  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }
  
  // required uint32 msg_size = 2;
  if (has_msg_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_size(), target);
  }
  
  // optional bytes msg_data = 3;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg_data(), target);
  }
  
  // optional bytes mac = 4;
  if (has_mac()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mac(), target);
  }
  
  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int envelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }
    
    // required uint32 msg_size = 2;
    if (has_msg_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_size());
    }
    
    // optional bytes msg_data = 3;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }
    
    // optional bytes mac = 4;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void envelope::MergeFrom(const envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_size()) {
      set_msg_size(from.msg_size());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void envelope::CopyFrom(const envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool envelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void envelope::Swap(envelope* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_size_, other->msg_size_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = envelope_descriptor_;
  metadata.reflection = envelope_reflection_;
  return metadata;
}

const ::std::string key_default("");
::google::protobuf::internal::ExtensionIdentifier< ::message::envelope,
    ::google::protobuf::internal::StringTypeTraits, 12, false >
  key(kKeyFieldNumber, key_default);

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
